{"version":3,"file":"static/js/468.374cd13b.chunk.js","mappings":"4KAIA,MAqGA,EArGeA,IAAgC,IAA/B,gBAAEC,EAAe,KAAEC,GAAMF,EACvC,MAAOG,EAAUC,IAAeC,EAAAA,EAAAA,UAASC,OAAOC,YAAc,MACvDC,EAAcC,IAAmBJ,EAAAA,EAAAA,WAAS,IAC1CK,EAAeC,IAAoBN,EAAAA,EAAAA,UAAS,SAGnDO,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAeA,KACnBT,EAAYE,OAAOC,YAAc,KAC7BD,OAAOC,WAAa,KAAKE,GAAgB,EAAM,EAIrD,OADAH,OAAOQ,iBAAiB,SAAUD,GAC3B,IAAMP,OAAOS,oBAAoB,SAAUF,EAAa,GAC9D,KAGHD,EAAAA,EAAAA,YAAU,KACR,MAAMI,EAAeA,KACnB,MAAMC,EAAW,CACf,CAAEC,IAAKhB,EAAKiB,QAASC,GAAI,QACzB,CAAEF,IAAKhB,EAAKmB,UAAWD,GAAI,UAC3B,CAAEF,IAAKhB,EAAKoB,cAAeF,GAAI,cAC/B,CAAEF,IAAKhB,EAAKqB,aAAcH,GAAI,aAC9B,CAAEF,IAAKhB,EAAKsB,gBAAiBJ,GAAI,gBACjC,CAAEF,IAAKhB,EAAKuB,YAAaL,GAAI,YAC7B,CAAEF,IAAKhB,EAAKwB,WAAYN,GAAI,YAG9B,IAAIO,EAAiB,OAErB,IAAK,MAAMC,KAAWX,EACpB,GAAIW,EAAQV,IAAIW,QAAS,CACvB,MAAMC,EAAOF,EAAQV,IAAIW,QAAQE,wBAG7BD,EAAKE,KAA4B,GAArB1B,OAAO2B,aAAqBH,EAAKI,QAA+B,GAArB5B,OAAO2B,cAChEN,EAAiBC,EAAQR,GAE7B,CAGFT,EAAiBgB,EAAe,EAIlC,OADArB,OAAOQ,iBAAiB,SAAUE,GAC3B,IAAMV,OAAOS,oBAAoB,SAAUC,EAAa,GAC9D,CAACd,IAGJ,MAGMiC,EAAiBA,CAACjB,EAAKU,KAC3B3B,EAAgBiB,GAChBP,EAAiBiB,GACbzB,GAAUM,GAAgB,EAAM,EAGtC,OACE2B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQC,SAAA,EACrBC,EAAAA,EAAAA,KAAA,MAAIC,QAASA,IAAML,EAAejC,EAAKiB,QAAS,QAASkB,UAAU,eAAcC,SAAC,qBAKjFnC,GACCiC,EAAAA,EAAAA,MAAAK,EAAAA,SAAA,CAAAH,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,mBAAmBG,QAlB1BE,IAAMjC,GAAiBD,GAkBwB,aAAW,oBAAmB8B,SACrF9B,GAAe+B,EAAAA,EAAAA,KAACI,EAAAA,IAAO,KAAMJ,EAAAA,EAAAA,KAACK,EAAAA,IAAM,OAGvCL,EAAAA,EAAAA,KAAA,MAAIF,UAAW,qBAAoB7B,EAAe,OAAS,IAAK8B,SAC7D,CAAC,SAAU,aAAc,YAAa,eAAgB,WAAY,WAAWO,KAAKjB,IACjFW,EAAAA,EAAAA,KAAA,MAEEC,QAASA,IAAML,EAAejC,EAAK,GAAG0B,QAAeA,GACrDS,UAAW3B,IAAkBkB,EAAU,SAAW,GAAGU,SAEpDV,EAAQkB,OAAO,GAAGC,cAAgBnB,EAAQoB,MAAM,IAJ5CpB,WAUbW,EAAAA,EAAAA,KAAA,MAAIF,UAAU,oBAAmBC,SAC9B,CAAC,SAAU,aAAc,YAAa,eAAgB,WAAY,WAAWO,KAAKjB,IACjFW,EAAAA,EAAAA,KAAA,MAEEC,QAASA,IAAML,EAAejC,EAAK,GAAG0B,QAAeA,GACrDS,UAAW3B,IAAkBkB,EAAU,SAAW,GAAGU,SAEpDV,EAAQkB,OAAO,GAAGC,cAAgBnB,EAAQoB,MAAM,IAJ5CpB,SAST,C","sources":["components/Navbar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { FaBars, FaTimes } from 'react-icons/fa';\nimport './Navbar.css';\n\nconst Navbar = ({ scrollToSection, refs }) => {\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 932);\n  const [isMobileOpen, setIsMobileOpen] = useState(false);\n  const [activeSection, setActiveSection] = useState('home');\n\n  // Handle screen resizing\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth <= 932);\n      if (window.innerWidth > 932) setIsMobileOpen(false); // Close mobile menu on resize\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  // Track active section based on scroll position\n  useEffect(() => {\n    const handleScroll = () => {\n      const sections = [\n        { ref: refs.homeRef, id: 'home' },\n        { ref: refs.skillsRef, id: 'skills' },\n        { ref: refs.experienceRef, id: 'experience' },\n        { ref: refs.educationRef, id: 'education' },\n        { ref: refs.publicationsRef, id: 'publications' },\n        { ref: refs.projectsRef, id: 'projects' },\n        { ref: refs.contactRef, id: 'contact' }\n      ];\n\n      let currentSection = 'home';\n\n      for (const section of sections) {\n        if (section.ref.current) {\n          const rect = section.ref.current.getBoundingClientRect();\n          \n          // Check if at least 50% of the section is visible\n          if (rect.top <= window.innerHeight * 0.4 && rect.bottom >= window.innerHeight * 0.4) {\n            currentSection = section.id;\n          }\n        }\n      }\n\n      setActiveSection(currentSection);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [refs]);\n\n  // Toggle mobile menu\n  const toggleMenu = () => setIsMobileOpen(!isMobileOpen);\n\n  // Close menu after clicking a link\n  const handleNavClick = (ref, section) => {\n    scrollToSection(ref);\n    setActiveSection(section);\n    if (isMobile) setIsMobileOpen(false);\n  };\n\n  return (\n    <nav className=\"navbar\">\n      <h1 onClick={() => handleNavClick(refs.homeRef, 'home')} className=\"navbar-title\">\n        Shubham Deshmukh\n      </h1>\n\n      {/* Mobile Menu Icon */}\n      {isMobile ? (\n        <>\n          <button className=\"mobile-menu-icon\" onClick={toggleMenu} aria-label=\"Toggle Navigation\">\n            {isMobileOpen ? <FaTimes /> : <FaBars />}\n          </button>\n\n          <ul className={`nav-links-mobile ${isMobileOpen ? 'open' : ''}`}>\n            {['skills', 'experience', 'education', 'publications', 'projects', 'contact'].map((section) => (\n              <li \n                key={section} \n                onClick={() => handleNavClick(refs[`${section}Ref`], section)}\n                className={activeSection === section ? 'active' : ''}\n              >\n                {section.charAt(0).toUpperCase() + section.slice(1)}\n              </li>\n            ))}\n          </ul>\n        </>\n      ) : (\n        <ul className=\"nav-links-desktop\">\n          {['skills', 'experience', 'education', 'publications', 'projects', 'contact'].map((section) => (\n            <li \n              key={section} \n              onClick={() => handleNavClick(refs[`${section}Ref`], section)}\n              className={activeSection === section ? 'active' : ''}\n            >\n              {section.charAt(0).toUpperCase() + section.slice(1)}\n            </li>\n          ))}\n        </ul>\n      )}\n    </nav>\n  );\n};\n\nexport default Navbar;\n"],"names":["_ref","scrollToSection","refs","isMobile","setIsMobile","useState","window","innerWidth","isMobileOpen","setIsMobileOpen","activeSection","setActiveSection","useEffect","handleResize","addEventListener","removeEventListener","handleScroll","sections","ref","homeRef","id","skillsRef","experienceRef","educationRef","publicationsRef","projectsRef","contactRef","currentSection","section","current","rect","getBoundingClientRect","top","innerHeight","bottom","handleNavClick","_jsxs","className","children","_jsx","onClick","_Fragment","toggleMenu","FaTimes","FaBars","map","charAt","toUpperCase","slice"],"sourceRoot":""}